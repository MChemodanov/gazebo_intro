<?xml version='1.0'?>
<sdf version='1.4'>
  <model name="mobot" xmlns:xacro="http://www.ros.org/wiki/xacro">


    <xacro:property name="PI" value="3.1415926535897931"/>

    <xacro:property name="chassisHeight" value="0.1"/>
    <xacro:property name="chassisLength" value="0.4"/>
    <xacro:property name="chassisWidth" value="0.2"/>
    <xacro:property name="chassisMass" value="50"/>

    <xacro:property name="casterRadius" value="0.05"/>
    <xacro:property name="casterMass" value="5"/>

    <xacro:property name="wheelWidth" value="0.05"/>
    <xacro:property name="wheelRadius" value="0.1"/>
    <xacro:property name="wheelPos" value="0.12"/>
    <xacro:property name="wheelMass" value="5"/>
    <xacro:property name="wheelDamping" value="1"/>

    <xacro:property name="cameraSize" value="0.05"/>
    <xacro:property name="cameraMass" value="0.1"/>

    
    <xacro:include filename="$(find mobot_description)/sdf/macros.xacro" />

    <static>false</static>

    <link name='chassis'>
      <pose>0 0 ${wheelRadius} 0 0 0</pose>
      <collision name='collision'>
        <geometry>
          <box>
            <size>${chassisLength} ${chassisWidth} ${chassisHeight}</size>
          </box>
        </geometry>
      </collision>

      <visual name='visual'>
        <geometry>
          <box>
            <size>${chassisLength} ${chassisWidth} ${chassisHeight}</size>
          </box>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Orange</name>
            <uri>__default__</uri>
          </script>
        </material>
      </visual>

      <inertial> 
        <mass>${chassisMass}</mass> 
        <box_inertia m="${chassisMass}" x="${chassisLength}" y="${chassisWidth}" z="${chassisHeight}"/>
      </inertial>

      <collision name='caster_collision'>
        <pose>${-chassisLength/3} 0 ${-chassisHeight/2} 0 0 0</pose>
        <geometry>
          <sphere>
            <radius>${casterRadius}</radius>
          </sphere>
        </geometry>

        <surface>
          <friction>
            <ode>
              <mu>0</mu>
              <mu2>0</mu2>
              <slip1>1.0</slip1>
              <slip2>1.0</slip2>
            </ode>
          </friction>
        </surface>
      </collision>

      <visual name='caster_visual'>
        <pose>${-chassisLength/3} 0 ${-chassisHeight/2} 0 0 0</pose>
        <geometry>
          <sphere>
            <radius>${casterRadius}</radius>
          </sphere>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Red</name>
            <uri>__default__</uri>
          </script>
        </material>
      </visual>
    </link>

    <joint name="camera_joint" type="revolute">
      <child>camera_link</child>
      <parent>chassis</parent>
      <axis>
        <xyz>0 0 1</xyz>
        <limit>
          <upper>0</upper>
          <lower>0</lower>
        </limit>
      </axis>
    </joint>

    <link name="camera_link">
      <pose>${chassisLength/2 - cameraSize/2} 0 ${wheelRadius + chassisHeight/2 + cameraSize/2} 0 0 0</pose>
      <inertial> 
        <mass>${cameraMass}</mass> 
        <box_inertia m="${cameraMass}" x="${cameraSize}" y="${cameraSize}" z="${cameraSize}"/>
      </inertial>

      <collision name='camera_collision'>
        <geometry>
          <box>
            <size>${cameraSize} ${cameraSize} ${cameraSize}</size>
          </box>
        </geometry>
      </collision>

      <visual name='camera_visual'>
        <geometry>
          <box>
            <size>${cameraSize} ${cameraSize} ${cameraSize}</size>
          </box>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Red</name>
            <uri>__default__</uri>
          </script>
        </material>
      </visual>
      <sensor name='camera1' type='camera'>
        <update_rate>30</update_rate>
        <camera name='head'>
          <horizontal_fov>1.39626</horizontal_fov>
          <image>
            <width>800</width>
            <height>800</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.02</near>
            <far>300</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
        <plugin name='camera_controller' filename='libgazebo_ros_camera.so'>
          <alwaysOn>true</alwaysOn>
          <updateRate>0.0</updateRate>
          <cameraName>mobot/camera1</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>camera_link</frameName>
          <hackBaseline>0.07</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
    </link>

    <wheel lr="left" tY="1"/>
    <wheel lr="right" tY="-1"/>

    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>100</updateRate>
      <leftJoint>left_wheel_hinge</leftJoint>
      <rightJoint>right_wheel_hinge</rightJoint>
      <wheelSeparation>${chassisWidth+wheelWidth}</wheelSeparation>
      <wheelDiameter>${2*wheelRadius}</wheelDiameter>
      <torque>20</torque>
      <commandTopic>mobot/cmd_vel</commandTopic>
      <odometryTopic>mobot/odom_diffdrive</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>chassis</robotBaseFrame>
    </plugin>

    <plugin name="camera_pos" filename="libmobot_plugins.so">
      <cameraJointName>camera_joint</cameraJointName>
    </plugin>

  </model>
</sdf>
